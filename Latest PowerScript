# PowerShell Script to Import Excel Data into SQL Server with Optimized Bulk Insert
Add-Type -AssemblyName System.Data

# SQL Server Connection Configuration
$server = "L10-NIMAVNIK-1\SQLEXPRESS"
$database = "SMT"
$connectionString = "Server=$server;Database=$database;Integrated Security=True"

# Chunk Size (Modify This for Performance Testing)
$chunkSize = 10000  # Adjust as needed

# Function to Execute SQL Queries
function Execute-SqlQuery {
    param ([string]$query)
    try {
        $connection = New-Object System.Data.SqlClient.SqlConnection
        $connection.ConnectionString = $connectionString
        $connection.Open()

        $command = $connection.CreateCommand()
        $command.CommandText = $query
        $command.ExecuteNonQuery()

        $connection.Close()
    } catch {
        Write-Host "[ERROR] SQL Query Execution Failed: $_"
    }
}

# Function to Create Staging Table with VARCHAR(MAX) Columns
function Create-StagingTable {
    param (
        [string]$tableName,
        [System.Data.DataTable]$dataTable
    )

    $validColumns = @()
    foreach ($col in $dataTable.Columns) {
        $colName = $col.ColumnName.Trim() -replace '[^\w]', '_'
        if ($colName -eq "") {
            Write-Host "[ERROR] Blank column name detected! Skipping table creation."
            return
        }
        $validColumns += "[$colName] VARCHAR(MAX)"
    }

    $columnsDefinition = $validColumns -join ", "

    $createTableQuery = @"
    IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '$tableName')
    BEGIN
        CREATE TABLE [$tableName] ($columnsDefinition);
    END
"@

    Execute-SqlQuery -query $createTableQuery
}

# Function to Import Excel Data into SQL Server in Chunks
function Import-ExcelToSql {
    param (
        [string]$filePath
    )
    try {
        $fileName = (Get-Item $filePath).BaseName
        $excel = New-Object -ComObject Excel.Application
        $excel.Visible = $false
        $workbook = $excel.Workbooks.Open($filePath)

        foreach ($sheet in $workbook.Sheets) {
            $sheetName = $sheet.Name
            $tableName = if ($sheetName -match "^Sheet") { "${fileName}_$sheetName" } else { $sheetName }
            $tableName = "[$tableName]"  # Always use square brackets to avoid SQL keyword conflicts

            # Read data from Excel Sheet
            $range = $sheet.UsedRange
            $rowCount = $range.Rows.Count
            $colCount = $range.Columns.Count

            # Convert Excel data to DataTable
            $dataTable = New-Object System.Data.DataTable
            for ($col = 1; $col -le $colCount; $col++) {
                $columnName = $range.Cells.Item(1, $col).Text.Trim() -replace '[^\w]', '_'
                if ($columnName -eq "") { $columnName = "Column$col" }  # Assign generic name to empty columns
                $dataTable.Columns.Add($columnName) | Out-Null
            }

            # Read Data into DataTable
            for ($row = 2; $row -le $rowCount; $row++) {
                $dataRow = $dataTable.NewRow()
                for ($col = 1; $col -le $colCount; $col++) {
                    $columnName = $dataTable.Columns[$col - 1].ColumnName
                    $dataRow[$columnName] = $range.Cells.Item($row, $col).Text
                }
                $dataTable.Rows.Add($dataRow)
            }

            # Create Staging Table
            Create-StagingTable -tableName $tableName -dataTable $dataTable

            # Ensure Table is Accessible Before Insertion
            Start-Sleep -Milliseconds 500  

            # Optimized Bulk Insert
            $bulkCopy = New-Object Data.SqlClient.SqlBulkCopy($connectionString)
            $bulkCopy.DestinationTableName = $tableName  # Ensure table name is correctly referenced
            $bulkCopy.BatchSize = $chunkSize
            $bulkCopy.BulkCopyTimeout = 600

            # Add Column Mappings
            foreach ($column in $dataTable.Columns) {
                $bulkCopy.ColumnMappings.Add($column.ColumnName, $column.ColumnName) | Out-Null
            }

            # Insert Data in Chunks
            for ($i = 0; $i -lt $dataTable.Rows.Count; $i += $chunkSize) {
                $chunk = $dataTable.Clone()
                for ($j = 0; $j -lt $chunkSize -and ($i + $j) -lt $dataTable.Rows.Count; $j++) {
                    $chunk.ImportRow($dataTable.Rows[$i + $j])
                }
                $bulkCopy.WriteToServer($chunk)
            }

            Write-Host "Data from $sheetName in $filePath imported successfully into $tableName!"
        }

        # Properly Close and Release Excel COM Object
        $workbook.Close($false)
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
        $excel.Quit()

        # Allow time for Excel to fully close
        Start-Sleep -Seconds 1

        [System.GC]::Collect()
        [System.GC]::WaitForPendingFinalizers()
    } catch {
        Write-Host "[ERROR] Failed to process Excel file '$filePath': $_"
    }
}

# Function to Process Folder and Import All Excel Files
function Process-Folder {
    param (
        [string]$folderPath
    )
    try {
        $files = Get-ChildItem -Path $folderPath -File | Where-Object { $_.Extension -eq ".xlsx" }

        foreach ($file in $files) {
            Import-ExcelToSql -filePath $file.FullName
        }

        Write-Host "All files processed successfully!"
    } catch {
        Write-Host "[ERROR] Folder processing failed: $_"
    }
}

# Main Execution
$folderPath = "C:\Users\nimavnik\Documents\Peritotask\ROIMA\ROIMA"
Process-Folder -folderPath $folderPath
