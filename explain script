import os
import pandas as pd
import pypyodbc as odbc
from sqlalchemy import create_engine
from sqlalchemy.engine import URL
from sqlalchemy import text

def get_sql_server_connection():
    server = 'L10-NIMAVNIK-1\\SQLEXPRESS' 
    database = 'SMT'
    driver = '{SQL Server}'

    connection_url = URL.create('mssql+pyodbc', query={'odbc_connect': f'DRIVER={driver};SERVER={server};DATABASE={database}'})
    engine = create_engine(connection_url, module=odbc)
    return engine

def create_staging_table(df, table_name, engine):
    columns = ", ".join([f"[{col}] VARCHAR(255)" for col in df.columns])
    create_table_sql = f"CREATE TABLE [{table_name}] ({columns})"

    with engine.connect() as conn:
        conn.execute(text(create_table_sql))

def find_header_and_data_start(excel_file, sheet_name=0, max_rows_to_check=5):
    # Load the Excel sheet without treating any row as the header
    df = pd.read_excel(excel_file, sheet_name=sheet_name, header=None)

    # Check if the second row is completely NaN (empty row)
    if df.iloc[1].isna().all() and df.iloc[0].notna().any():
        # Scenario 1: The first row is some random information, header starts from row 3
        print("Second row is all NaN, adjusting header to row 3.")
        header_row = 2  # Header is the 3rd row (index 2)
        data_start_row = 3  # Data starts from the 4th row (index 3)
    else:
        # Scenario 2: The first row is the header, data starts from row 2
        print("Second row is not NaN, assuming first row is header.")
        header_row = 0  # Header is the 1st row (index 0)
        data_start_row = 1  # Data starts from the 2nd row (index 1)

    return header_row, data_start_row

def import_excel_to_sql(file_path, engine):
    # Detect where the header and data start
    header_row, data_start_row = find_header_and_data_start(file_path)
    
    # Load the Excel file with the detected header
    df = pd.read_excel(file_path, header=header_row)
    
    # Clean the column names (replace spaces and special characters)
    df.columns = [col.replace(' ', '_').replace('/', '_') for col in df.columns]
    
    # Extract the table name from the file name
    table_name = os.path.splitext(os.path.basename(file_path))[0]
    
    # Create the staging table in SQL
    create_staging_table(df, table_name, engine)
    
    # Import the data to the SQL table
    df.to_sql(table_name, engine, if_exists='append', index=False)
    
    print(f"Data from {file_path} imported successfully into staging table!")

def process_excel_folder(folder_path):
    excel_files = [f for f in os.listdir(folder_path) if f.endswith('.xlsx')]
    
    engine = get_sql_server_connection()

    for file in excel_files:
        file_path = os.path.join(folder_path, file)
        import_excel_to_sql(file_path, engine)
    
    print("All files processed successfully!")

if __name__ == "__main__":
    folder_path = r'C:\Users\nimavnik\Documents\Peritotask\ROIMA\ROIMA'  # Path to your Excel files
    process_excel_folder(folder_path)
